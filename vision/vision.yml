apiVersion: apps/v1
kind: Deployment
metadata:
  name: vision-microservice-sam
  namespace: vision
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vision-microservice-sam
  template:
    metadata:
      labels:
        app: vision-microservice-sam
    spec:
      containers:
      - name: vision-microservice-sam
        image: lizhouyu/vision_microservice_sam:v1.0
        envFrom:
          - configMapRef:
              name: vision-microservice-config-flask
        ports:
        - containerPort: 5000
        # resources:
        #   limits:
        #     nvidia.com/gpu: 1
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: vision-microservice-yolov8
  namespace: vision
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vision-microservice-yolov8
  template:
    metadata:
      labels:
        app: vision-microservice-yolov8
    spec:
      containers:
      - name: vision-microservice-yolov8
        image: lizhouyu/vision_microservice_yolov8:v1.0
        envFrom:
          - configMapRef:
              name: vision-microservice-config-flask
        ports:
        - containerPort: 5000
        # resources:
        #   limits:
        #     nvidia.com/gpu: 1
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: vision-microservice-hog
  namespace: vision
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vision-microservice-hog
  template:
    metadata:
      labels:
        app: vision-microservice-hog
    spec:
      containers:
      - name: vision-microservice-hog
        image: lizhouyu/vision_microservice_hog:v1.0
        envFrom:
          - configMapRef:
              name: vision-microservice-config-hog
        ports:
        - containerPort: 5000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vision-microservice-frontend
  namespace: vision
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vision-microservice-frontend
  template:
    metadata:
      labels:
        app: vision-microservice-frontend
    spec:
      containers:
      - name: vision-microservice-frontend
        image: lizhouyu/vision_microservice_frontend:v1.1 # the version with context-propagation instrumented code
        envFrom:
          - configMapRef:
              name: vision-microservice-config-web
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: vision-microservice-sam
  namespace: vision
spec:
  selector:
    app: vision-microservice-sam
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: vision-microservice-yolov8
  namespace: vision
spec:
  selector:
    app: vision-microservice-yolov8
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: vision-microservice-hog
  namespace: vision
spec:
  selector:
    app: vision-microservice-hog
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: vision-microservice-frontend
  namespace: vision
spec:
  type: NodePort
  selector:
    app: vision-microservice-frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vision-microservice-ingress
  namespace: vision
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "360s"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "360s"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "360s"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  ingressClassName: nginx
  rules:
    - host: localhost # replace with your own domain
      http:
        paths:
          - path: /vision/model-sam(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: vision-microservice-sam
                port:
                  number: 5000
          - path: /vision/model-yolov8(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: vision-microservice-yolov8
                port:
                  number: 5000
          - path: /vision/model-hog-people(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: vision-microservice-hog
                port:
                  number: 5000
          - path: /vision/trace/collector/otlp(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: jaeger-with-cassandra-and-kafka-collector
                port:
                  number: 4318
---
# configmap for the flask-based microservices
apiVersion: v1
kind: ConfigMap
metadata:
  name: vision-microservice-config-flask
  namespace: vision
data:
  TRACE_COLLECTOR_ENDPOINT: http://jaeger-with-cassandra-and-kafka-collector.observability.svc.cluster.local:4318
---
# configmap for the springboot-based HOG microservice
apiVersion: v1
kind: ConfigMap
metadata:
  name: vision-microservice-config-hog
  namespace: vision
data:
  OTEL_TRACES_EXPORTEER: zipkin
  OTEL_METRICS_EXPORTER: none
  OTEL_LOGS_EXPORTER: none
  OTEL_EXPORTER_ZIPKIN_ENDPOINT: http://jaeger-with-cassandra-and-kafka-collector.observability.svc.cluster.local:9411/api/v2/spans
  JAVA_TOOL_OPTIONS: "-javaagent:/app/opentelemetry-javaagent.jar -Dotel.exporter.otlp.protocol=http/protobuf"
  OTEL_SERVICE_NAME: "vision-hog"
---
# configmap for the reactjs-based frontend
apiVersion: v1
kind: ConfigMap
metadata:
  name: vision-microservice-config-web
  namespace: vision
data:
  REACT_APP_BACKEND_URL: http://localhost/vision

  



                  

